{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\pay\\\\client\\\\src\\\\components\\\\wallet\\\\QRScanner.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Html5QrcodeScanner } from 'html5-qrcode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QRScanner = ({\n  onClose,\n  onScanSuccess,\n  onError\n}) => {\n  _s();\n  const [scanResult, setScanResult] = useState(null);\n  const [hasFlash, setHasFlash] = useState(false);\n  const [isFlashOn, setIsFlashOn] = useState(false);\n  const [cameras, setCameras] = useState([]);\n  const [selectedCamera, setSelectedCamera] = useState(null);\n  const [scanner, setScanner] = useState(null);\n  const [error, setError] = useState(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [retryCount, setRetryCount] = useState(0);\n  useEffect(() => {\n    // Initialize QR scanner with delay to ensure DOM is fully rendered\n    const initTimeout = setTimeout(() => {\n      checkCameraPermission();\n    }, 1000);\n    return () => {\n      clearTimeout(initTimeout);\n      // Clean up on unmount\n      if (scanner) {\n        try {\n          scanner.clear();\n        } catch (err) {\n          console.log('Error clearing scanner on unmount:', err);\n        }\n      }\n    };\n  }, []);\n\n  // Check camera permission first before attempting to get cameras\n  const checkCameraPermission = () => {\n    // Check for flash/torch capability\n    if (navigator.mediaDevices && navigator.mediaDevices.getSupportedConstraints) {\n      const constraints = navigator.mediaDevices.getSupportedConstraints();\n      setHasFlash(constraints.torch || false);\n    }\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({\n        video: {\n          facingMode: \"environment\",\n          // Prefer back camera\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          }\n        }\n      }).then(() => {\n        console.log(\"Camera permission granted, getting cameras...\");\n        // Wait a moment before trying to access cameras\n        setTimeout(() => {\n          try {\n            Html5QrcodeScanner.getCameras().then(devices => {\n              console.log(\"Available cameras:\", devices);\n              setCameras(devices);\n              if (devices.length > 0) {\n                // Try to find back camera first\n                const backCamera = devices.find(camera => camera.label.toLowerCase().includes('back') || camera.label.toLowerCase().includes('rear'));\n                setSelectedCamera(backCamera ? backCamera.id : devices[0].id);\n              }\n              // Initialize scanner after getting cameras\n              initializeScanner();\n            }).catch(err => {\n              console.error('Error getting cameras:', err);\n              // Still try to initialize scanner even if we can't get camera list\n              initializeScanner();\n            });\n          } catch (err) {\n            console.error('Error in camera initialization:', err);\n            initializeScanner(); // Still try to initialize scanner\n          }\n        }, 500);\n      }).catch(err => {\n        console.error('Camera permission error:', err);\n        setError('Camera access denied. Please check your browser permissions and try again.');\n        if (onError) {\n          onError('Camera access denied. Please check your browser permissions and try again.');\n        }\n      });\n    } else {\n      setError('Your browser does not support camera access. Please try a different browser.');\n      if (onError) {\n        onError('Your browser does not support camera access. Please try a different browser.');\n      }\n    }\n  };\n  const initializeScanner = () => {\n    try {\n      // Calculate optimal QR box size based on screen width\n      const screenWidth = window.innerWidth;\n      const qrBoxSize = Math.min(screenWidth * 0.7, 250);\n      console.log(`Initializing scanner with QR box size: ${qrBoxSize}`);\n\n      // Create scanner with simplified config for better compatibility\n      const newScanner = new Html5QrcodeScanner('reader', {\n        qrbox: {\n          width: qrBoxSize,\n          height: qrBoxSize\n        },\n        fps: 3,\n        // Lower FPS for better performance and compatibility\n        rememberLastUsedCamera: false,\n        // Don't remember camera to avoid issues\n        aspectRatio: 1.0,\n        disableFlip: false,\n        showTorchButtonIfSupported: false,\n        // Use our own button\n        formatsToSupport: [Html5QrcodeScanner.FORMAT_QR_CODE],\n        experimentalFeatures: {\n          useBarCodeDetectorIfSupported: true\n        }\n      });\n      setScanner(newScanner);\n      setIsScanning(true);\n\n      // Success callback\n      const onScannerSuccess = (decodedText, decodedResult) => {\n        // Prevent multiple callbacks\n        if (!isScanning) return;\n        setIsScanning(false);\n\n        // Vibrate if supported\n        if (navigator.vibrate) {\n          navigator.vibrate(200);\n        }\n\n        // Stop scanner\n        try {\n          newScanner.clear();\n        } catch (e) {\n          console.log('Error clearing scanner:', e);\n        }\n        setScanResult(decodedText);\n\n        // Process scanned data\n        if (onScanSuccess) {\n          try {\n            let parsedData = decodedText;\n            // Try to parse as JSON if it looks like JSON\n            if (decodedText.startsWith('{') && decodedText.endsWith('}')) {\n              try {\n                parsedData = JSON.parse(decodedText);\n                // Use wallet address if available\n                if (parsedData.walletAddress) {\n                  parsedData = parsedData.walletAddress;\n                }\n              } catch (e) {\n                console.log('Not valid JSON, using as is');\n              }\n            }\n            onScanSuccess(parsedData);\n          } catch (err) {\n            console.error('Error handling scan data:', err);\n            setError('Invalid QR code format. Please try again.');\n          }\n        }\n      };\n\n      // Error callback\n      const onScannerError = err => {\n        console.warn('Scanner error:', err);\n        let errorMessage = 'Error scanning QR code. Please try again.';\n        if (typeof err === 'string') {\n          if (err.includes('permission')) {\n            errorMessage = 'Camera access denied. Please check permissions.';\n          } else if (err.includes('camera')) {\n            errorMessage = 'Could not access camera. Please try again.';\n          }\n        }\n        setError(errorMessage);\n\n        // Pass error to parent component\n        if (onError) {\n          onError(errorMessage);\n        }\n      };\n\n      // Render scanner with sufficient delay to ensure DOM is ready\n      setTimeout(() => {\n        try {\n          console.log(\"Rendering scanner...\");\n          newScanner.render(onScannerSuccess, onScannerError);\n          console.log(\"Scanner render completed\");\n\n          // Clear any existing error if render successful\n          if (error) {\n            setError(null);\n          }\n        } catch (err) {\n          console.error('Error rendering scanner:', err);\n          setError('Failed to initialize camera. Please try again or check your browser settings.');\n          if (onError) {\n            onError('Failed to initialize camera. Please check if camera is allowed and try again.');\n          }\n        }\n      }, 1000);\n    } catch (err) {\n      console.error('Error in scanner initialization:', err);\n      setError('Failed to initialize QR scanner. Please refresh the page and try again.');\n      if (onError) {\n        onError('Failed to initialize QR scanner. Please try again later.');\n      }\n    }\n  };\n\n  // Toggle flash/torch if available\n  const toggleFlash = async () => {\n    try {\n      if (scanner && scanner.getHtml5QrcodeScanner()) {\n        const html5QrCode = scanner.getHtml5QrcodeScanner().getHtml5QrCode();\n        if (html5QrCode) {\n          await html5QrCode.applyVideoConstraints({\n            advanced: [{\n              torch: !isFlashOn\n            }]\n          });\n          setIsFlashOn(!isFlashOn);\n        }\n      }\n    } catch (err) {\n      console.error('Error toggling flash:', err);\n      // Don't show error to user, just silently fail\n    }\n  };\n\n  // Switch between available cameras\n  const switchCamera = async cameraId => {\n    try {\n      if (scanner && scanner.getHtml5QrcodeScanner()) {\n        const html5QrCode = scanner.getHtml5QrcodeScanner().getHtml5QrCode();\n        if (html5QrCode) {\n          await html5QrCode.stop();\n          await html5QrCode.start({\n            deviceId: {\n              exact: cameraId\n            }\n          }, {\n            fps: 3,\n            qrbox: 250\n          }, decodedText => {\n            scanner.getHtml5QrcodeScanner().onScanSuccess(decodedText);\n          }, errorMessage => {\n            scanner.getHtml5QrcodeScanner().onScanError(errorMessage);\n          });\n          setSelectedCamera(cameraId);\n        }\n      }\n    } catch (err) {\n      console.error('Error switching camera:', err);\n      setError('Unable to switch camera. Please try again.');\n    }\n  };\n\n  // Handle retry when errors occur\n  const handleRetry = () => {\n    setError(null);\n    setRetryCount(retryCount + 1);\n    if (scanner) {\n      try {\n        scanner.clear();\n      } catch (e) {\n        console.log('Error clearing scanner:', e);\n      }\n    }\n    setTimeout(() => {\n      setIsScanning(true);\n      // If we've already retried multiple times, try resetting everything\n      if (retryCount >= 2) {\n        checkCameraPermission();\n      } else {\n        initializeScanner();\n      }\n    }, 1000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"qr-scanner my-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scanner-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-camera\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), \" Scan QR Code\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scanner-controls\",\n        children: [hasFlash && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `btn btn-icon ${isFlashOn ? 'btn-warning' : 'btn-light'}`,\n          onClick: toggleFlash,\n          title: \"Toggle Flash\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: `fas fa-bolt`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this), cameras.length > 1 && /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"camera-select form-control\",\n          value: selectedCamera || '',\n          onChange: e => switchCamera(e.target.value),\n          children: cameras.map(camera => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: camera.id,\n            children: camera.label || `Camera ${camera.id.slice(0, 4)}`\n          }, camera.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"scanner-instructions\",\n      children: \"Point your camera at a wallet QR code to scan it\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-exclamation-circle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this), \" \", error, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-sm btn-primary mr-2\",\n          onClick: handleRetry,\n          children: \"Retry\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-sm btn-light\",\n          onClick: () => setError(null),\n          children: \"Dismiss\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 9\n    }, this), scanResult ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scan-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-success\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fas fa-check-circle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Scan successful!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }, this), \" Address detected.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: onClose,\n        children: \"Continue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 346,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scan-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"reader\",\n        className: \"reader-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-light mt-3\",\n        onClick: onClose,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 290,\n    columnNumber: 5\n  }, this);\n};\n_s(QRScanner, \"0ke65yXDF+Fsi5zVogXRc/vDcb4=\");\n_c = QRScanner;\nexport default QRScanner;\nvar _c;\n$RefreshReg$(_c, \"QRScanner\");","map":{"version":3,"names":["React","useState","useEffect","Html5QrcodeScanner","jsxDEV","_jsxDEV","QRScanner","onClose","onScanSuccess","onError","_s","scanResult","setScanResult","hasFlash","setHasFlash","isFlashOn","setIsFlashOn","cameras","setCameras","selectedCamera","setSelectedCamera","scanner","setScanner","error","setError","isScanning","setIsScanning","retryCount","setRetryCount","initTimeout","setTimeout","checkCameraPermission","clearTimeout","clear","err","console","log","navigator","mediaDevices","getSupportedConstraints","constraints","torch","getUserMedia","video","facingMode","width","ideal","height","then","getCameras","devices","length","backCamera","find","camera","label","toLowerCase","includes","id","initializeScanner","catch","screenWidth","window","innerWidth","qrBoxSize","Math","min","newScanner","qrbox","fps","rememberLastUsedCamera","aspectRatio","disableFlip","showTorchButtonIfSupported","formatsToSupport","FORMAT_QR_CODE","experimentalFeatures","useBarCodeDetectorIfSupported","onScannerSuccess","decodedText","decodedResult","vibrate","e","parsedData","startsWith","endsWith","JSON","parse","walletAddress","onScannerError","warn","errorMessage","render","toggleFlash","getHtml5QrcodeScanner","html5QrCode","getHtml5QrCode","applyVideoConstraints","advanced","switchCamera","cameraId","stop","start","deviceId","exact","onScanError","handleRetry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","value","onChange","target","map","slice","_c","$RefreshReg$"],"sources":["C:/Users/user/Documents/pay/client/src/components/wallet/QRScanner.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Html5QrcodeScanner } from 'html5-qrcode';\r\n\r\nconst QRScanner = ({ onClose, onScanSuccess, onError }) => {\r\n  const [scanResult, setScanResult] = useState(null);\r\n  const [hasFlash, setHasFlash] = useState(false);\r\n  const [isFlashOn, setIsFlashOn] = useState(false);\r\n  const [cameras, setCameras] = useState([]);\r\n  const [selectedCamera, setSelectedCamera] = useState(null);\r\n  const [scanner, setScanner] = useState(null);\r\n  const [error, setError] = useState(null);\r\n  const [isScanning, setIsScanning] = useState(false);\r\n  const [retryCount, setRetryCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    // Initialize QR scanner with delay to ensure DOM is fully rendered\r\n    const initTimeout = setTimeout(() => {\r\n      checkCameraPermission();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearTimeout(initTimeout);\r\n      // Clean up on unmount\r\n      if (scanner) {\r\n        try {\r\n          scanner.clear();\r\n        } catch (err) {\r\n          console.log('Error clearing scanner on unmount:', err);\r\n        }\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Check camera permission first before attempting to get cameras\r\n  const checkCameraPermission = () => {\r\n    // Check for flash/torch capability\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getSupportedConstraints) {\r\n      const constraints = navigator.mediaDevices.getSupportedConstraints();\r\n      setHasFlash(constraints.torch || false);\r\n    }\r\n\r\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n      navigator.mediaDevices.getUserMedia({ \r\n        video: { \r\n          facingMode: \"environment\",  // Prefer back camera\r\n          width: { ideal: 1280 },\r\n          height: { ideal: 720 }\r\n        } \r\n      })\r\n      .then(() => {\r\n        console.log(\"Camera permission granted, getting cameras...\");\r\n        // Wait a moment before trying to access cameras\r\n        setTimeout(() => {\r\n          try {\r\n            Html5QrcodeScanner.getCameras()\r\n              .then(devices => {\r\n                console.log(\"Available cameras:\", devices);\r\n                setCameras(devices);\r\n                if (devices.length > 0) {\r\n                  // Try to find back camera first\r\n                  const backCamera = devices.find(camera => \r\n                    camera.label.toLowerCase().includes('back') || \r\n                    camera.label.toLowerCase().includes('rear')\r\n                  );\r\n                  setSelectedCamera(backCamera ? backCamera.id : devices[0].id);\r\n                }\r\n                // Initialize scanner after getting cameras\r\n                initializeScanner();\r\n              })\r\n              .catch(err => {\r\n                console.error('Error getting cameras:', err);\r\n                // Still try to initialize scanner even if we can't get camera list\r\n                initializeScanner();\r\n              });\r\n          } catch (err) {\r\n            console.error('Error in camera initialization:', err);\r\n            initializeScanner(); // Still try to initialize scanner\r\n          }\r\n        }, 500);\r\n      })\r\n      .catch(err => {\r\n        console.error('Camera permission error:', err);\r\n        setError('Camera access denied. Please check your browser permissions and try again.');\r\n        if (onError) {\r\n          onError('Camera access denied. Please check your browser permissions and try again.');\r\n        }\r\n      });\r\n    } else {\r\n      setError('Your browser does not support camera access. Please try a different browser.');\r\n      if (onError) {\r\n        onError('Your browser does not support camera access. Please try a different browser.');\r\n      }\r\n    }\r\n  };\r\n\r\n  const initializeScanner = () => {\r\n    try {\r\n      // Calculate optimal QR box size based on screen width\r\n      const screenWidth = window.innerWidth;\r\n      const qrBoxSize = Math.min(screenWidth * 0.7, 250);\r\n\r\n      console.log(`Initializing scanner with QR box size: ${qrBoxSize}`);\r\n\r\n      // Create scanner with simplified config for better compatibility\r\n      const newScanner = new Html5QrcodeScanner('reader', {\r\n        qrbox: {\r\n          width: qrBoxSize,\r\n          height: qrBoxSize\r\n        },\r\n        fps: 3, // Lower FPS for better performance and compatibility\r\n        rememberLastUsedCamera: false, // Don't remember camera to avoid issues\r\n        aspectRatio: 1.0,\r\n        disableFlip: false,\r\n        showTorchButtonIfSupported: false, // Use our own button\r\n        formatsToSupport: [\r\n          Html5QrcodeScanner.FORMAT_QR_CODE\r\n        ],\r\n        experimentalFeatures: {\r\n          useBarCodeDetectorIfSupported: true\r\n        }\r\n      });\r\n\r\n      setScanner(newScanner);\r\n      setIsScanning(true);\r\n\r\n      // Success callback\r\n      const onScannerSuccess = (decodedText, decodedResult) => {\r\n        // Prevent multiple callbacks\r\n        if (!isScanning) return;\r\n        setIsScanning(false);\r\n        \r\n        // Vibrate if supported\r\n        if (navigator.vibrate) {\r\n          navigator.vibrate(200);\r\n        }\r\n\r\n        // Stop scanner\r\n        try {\r\n          newScanner.clear();\r\n        } catch (e) {\r\n          console.log('Error clearing scanner:', e);\r\n        }\r\n        \r\n        setScanResult(decodedText);\r\n        \r\n        // Process scanned data\r\n        if (onScanSuccess) {\r\n          try {\r\n            let parsedData = decodedText;\r\n            // Try to parse as JSON if it looks like JSON\r\n            if (decodedText.startsWith('{') && decodedText.endsWith('}')) {\r\n              try {\r\n                parsedData = JSON.parse(decodedText);\r\n                // Use wallet address if available\r\n                if (parsedData.walletAddress) {\r\n                  parsedData = parsedData.walletAddress;\r\n                }\r\n              } catch (e) {\r\n                console.log('Not valid JSON, using as is');\r\n              }\r\n            }\r\n            onScanSuccess(parsedData);\r\n          } catch (err) {\r\n            console.error('Error handling scan data:', err);\r\n            setError('Invalid QR code format. Please try again.');\r\n          }\r\n        }\r\n      };\r\n\r\n      // Error callback\r\n      const onScannerError = (err) => {\r\n        console.warn('Scanner error:', err);\r\n        let errorMessage = 'Error scanning QR code. Please try again.';\r\n        \r\n        if (typeof err === 'string') {\r\n          if (err.includes('permission')) {\r\n            errorMessage = 'Camera access denied. Please check permissions.';\r\n          } else if (err.includes('camera')) {\r\n            errorMessage = 'Could not access camera. Please try again.';\r\n          }\r\n        }\r\n        \r\n        setError(errorMessage);\r\n        \r\n        // Pass error to parent component\r\n        if (onError) {\r\n          onError(errorMessage);\r\n        }\r\n      };\r\n\r\n      // Render scanner with sufficient delay to ensure DOM is ready\r\n      setTimeout(() => {\r\n        try {\r\n          console.log(\"Rendering scanner...\");\r\n          newScanner.render(onScannerSuccess, onScannerError);\r\n          console.log(\"Scanner render completed\");\r\n          \r\n          // Clear any existing error if render successful\r\n          if (error) {\r\n            setError(null);\r\n          }\r\n        } catch (err) {\r\n          console.error('Error rendering scanner:', err);\r\n          setError('Failed to initialize camera. Please try again or check your browser settings.');\r\n          \r\n          if (onError) {\r\n            onError('Failed to initialize camera. Please check if camera is allowed and try again.');\r\n          }\r\n        }\r\n      }, 1000);\r\n\r\n    } catch (err) {\r\n      console.error('Error in scanner initialization:', err);\r\n      setError('Failed to initialize QR scanner. Please refresh the page and try again.');\r\n      if (onError) {\r\n        onError('Failed to initialize QR scanner. Please try again later.');\r\n      }\r\n    }\r\n  };\r\n\r\n  // Toggle flash/torch if available\r\n  const toggleFlash = async () => {\r\n    try {\r\n      if (scanner && scanner.getHtml5QrcodeScanner()) {\r\n        const html5QrCode = scanner.getHtml5QrcodeScanner().getHtml5QrCode();\r\n        if (html5QrCode) {\r\n          await html5QrCode.applyVideoConstraints({\r\n            advanced: [{ torch: !isFlashOn }]\r\n          });\r\n          setIsFlashOn(!isFlashOn);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error toggling flash:', err);\r\n      // Don't show error to user, just silently fail\r\n    }\r\n  };\r\n\r\n  // Switch between available cameras\r\n  const switchCamera = async (cameraId) => {\r\n    try {\r\n      if (scanner && scanner.getHtml5QrcodeScanner()) {\r\n        const html5QrCode = scanner.getHtml5QrcodeScanner().getHtml5QrCode();\r\n        if (html5QrCode) {\r\n          await html5QrCode.stop();\r\n          await html5QrCode.start(\r\n            { deviceId: { exact: cameraId } },\r\n            { fps: 3, qrbox: 250 },\r\n            (decodedText) => {\r\n              scanner.getHtml5QrcodeScanner().onScanSuccess(decodedText);\r\n            },\r\n            (errorMessage) => {\r\n              scanner.getHtml5QrcodeScanner().onScanError(errorMessage);\r\n            }\r\n          );\r\n          setSelectedCamera(cameraId);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Error switching camera:', err);\r\n      setError('Unable to switch camera. Please try again.');\r\n    }\r\n  };\r\n\r\n  // Handle retry when errors occur\r\n  const handleRetry = () => {\r\n    setError(null);\r\n    setRetryCount(retryCount + 1);\r\n    \r\n    if (scanner) {\r\n      try {\r\n        scanner.clear();\r\n      } catch (e) {\r\n        console.log('Error clearing scanner:', e);\r\n      }\r\n    }\r\n    \r\n    setTimeout(() => {\r\n      setIsScanning(true);\r\n      // If we've already retried multiple times, try resetting everything\r\n      if (retryCount >= 2) {\r\n        checkCameraPermission();\r\n      } else {\r\n        initializeScanner();\r\n      }\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div className=\"qr-scanner my-4\">\r\n      <div className=\"scanner-header\">\r\n        <h3>\r\n          <i className=\"fas fa-camera\"></i> Scan QR Code\r\n        </h3>\r\n        <div className=\"scanner-controls\">\r\n          {hasFlash && (\r\n            <button \r\n              className={`btn btn-icon ${isFlashOn ? 'btn-warning' : 'btn-light'}`}\r\n              onClick={toggleFlash}\r\n              title=\"Toggle Flash\"\r\n            >\r\n              <i className={`fas fa-bolt`}></i>\r\n            </button>\r\n          )}\r\n          {cameras.length > 1 && (\r\n            <select \r\n              className=\"camera-select form-control\"\r\n              value={selectedCamera || ''}\r\n              onChange={(e) => switchCamera(e.target.value)}\r\n            >\r\n              {cameras.map(camera => (\r\n                <option key={camera.id} value={camera.id}>\r\n                  {camera.label || `Camera ${camera.id.slice(0, 4)}`}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          )}\r\n        </div>\r\n      </div>\r\n      \r\n      <p className=\"scanner-instructions\">\r\n        Point your camera at a wallet QR code to scan it\r\n      </p>\r\n      \r\n      {error && (\r\n        <div className=\"alert alert-danger\">\r\n          <i className=\"fas fa-exclamation-circle\"></i> {error}\r\n          <div className=\"mt-2\">\r\n            <button \r\n              className=\"btn btn-sm btn-primary mr-2\"\r\n              onClick={handleRetry}\r\n            >\r\n              Retry\r\n            </button>\r\n            <button \r\n              className=\"btn btn-sm btn-light\"\r\n              onClick={() => setError(null)}\r\n            >\r\n              Dismiss\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      \r\n      {scanResult ? (\r\n        <div className=\"scan-result\">\r\n          <div className=\"alert alert-success\">\r\n            <i className=\"fas fa-check-circle\"></i>\r\n            <strong>Scan successful!</strong> Address detected.\r\n          </div>\r\n          <button \r\n            className=\"btn btn-primary\"\r\n            onClick={onClose}\r\n          >\r\n            Continue\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"scan-container\">\r\n          <div id=\"reader\" className=\"reader-container\"></div>\r\n          <button \r\n            className=\"btn btn-light mt-3\"\r\n            onClick={onClose}\r\n          >\r\n            Cancel\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QRScanner; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}