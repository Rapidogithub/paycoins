{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Documents\\\\pay\\\\client\\\\src\\\\pages\\\\TransactionHistory.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport { getStoredWallet, getStoredTransactions, storeTransactions } from '../utils/localStorage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionHistory = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [wallet, setWallet] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\n\n  // Check online status\n  useEffect(() => {\n    const handleOnline = () => setIsOffline(false);\n    const handleOffline = () => setIsOffline(true);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        // Load wallet data\n        let walletData;\n        if (navigator.onLine) {\n          // Try to get wallet from API\n          const walletRes = await axios.get('/api/wallets');\n          walletData = walletRes.data;\n        } else {\n          // Use localStorage in offline mode\n          walletData = getStoredWallet();\n          if (!walletData) {\n            setError('No wallet data available offline');\n            setLoading(false);\n            return;\n          }\n        }\n        setWallet(walletData);\n\n        // Load transaction history\n        let transactionData;\n        if (navigator.onLine) {\n          // Get from API if online\n          const transactionsRes = await axios.get('/api/transactions');\n          transactionData = transactionsRes.data;\n\n          // Sync with local pending transactions\n          const storedTransactions = getStoredTransactions();\n          const pendingTransactions = storedTransactions.filter(t => t.isPending);\n          if (pendingTransactions.length > 0) {\n            // TODO: In a real app, we would sync these with the server\n            // For now, just display them\n            transactionData = [...pendingTransactions, ...transactionData];\n\n            // Update localStorage to mark these as no longer pending\n            storeTransactions(transactionData);\n          }\n        } else {\n          // Use localStorage in offline mode\n          transactionData = getStoredTransactions();\n        }\n        setTransactions(transactionData);\n        setLoading(false);\n      } catch (err) {\n        console.error('Error loading transaction history:', err);\n\n        // Fallback to localStorage\n        const storedWallet = getStoredWallet();\n        const storedTransactions = getStoredTransactions();\n        if (storedWallet) {\n          setWallet(storedWallet);\n        }\n        setTransactions(storedTransactions);\n        if (!storedWallet && !storedTransactions.length) {\n          setError('Failed to load transaction history');\n        }\n        setLoading(false);\n      }\n    };\n    loadData();\n  }, []);\n  const formatDate = date => {\n    return moment(date).format('MMM DD, YYYY [at] h:mm A');\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading transaction history...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-center my-4\",\n      children: \"Transaction History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), isOffline && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-warning\",\n      children: [/*#__PURE__*/_jsxDEV(\"i\", {\n        className: \"fas fa-wifi-slash\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this), \" You are currently offline. Displaying locally stored transactions.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), transactions.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-info\",\n      children: \"No transactions found. Start sending or receiving coins!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-list\",\n      children: transactions.map(transaction => {\n        const isSender = wallet && transaction.senderWalletAddress === wallet.walletAddress;\n        const otherPartyAddress = isSender ? transaction.receiverWalletAddress : transaction.senderWalletAddress;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"transaction-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"transaction-details\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: `transaction-amount ${isSender ? 'sent' : 'received'}`,\n              children: [isSender ? '-' : '+', transaction.amount, \" Coins\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"transaction-date\",\n              children: formatDate(transaction.date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"transaction-address\",\n              children: [isSender ? 'To: ' : 'From: ', otherPartyAddress]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `badge ${transaction.isPending ? 'badge-warning' : 'badge-primary'}`,\n              children: transaction.isPending ? 'Pending' : isSender ? 'Sent' : 'Received'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this)]\n        }, transaction.id || transaction._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionHistory, \"rl06rG+/YBbQk38NAi0ZETfun0A=\");\n_c = TransactionHistory;\nexport default TransactionHistory;\nvar _c;\n$RefreshReg$(_c, \"TransactionHistory\");","map":{"version":3,"names":["React","useState","useEffect","axios","moment","getStoredWallet","getStoredTransactions","storeTransactions","jsxDEV","_jsxDEV","TransactionHistory","_s","transactions","setTransactions","wallet","setWallet","loading","setLoading","error","setError","isOffline","setIsOffline","navigator","onLine","handleOnline","handleOffline","window","addEventListener","removeEventListener","loadData","walletData","walletRes","get","data","transactionData","transactionsRes","storedTransactions","pendingTransactions","filter","t","isPending","length","err","console","storedWallet","formatDate","date","format","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","transaction","isSender","senderWalletAddress","walletAddress","otherPartyAddress","receiverWalletAddress","amount","id","_id","_c","$RefreshReg$"],"sources":["C:/Users/user/Documents/pay/client/src/pages/TransactionHistory.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport { getStoredWallet, getStoredTransactions, storeTransactions } from '../utils/localStorage';\r\n\r\nconst TransactionHistory = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [wallet, setWallet] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  const [isOffline, setIsOffline] = useState(!navigator.onLine);\r\n\r\n  // Check online status\r\n  useEffect(() => {\r\n    const handleOnline = () => setIsOffline(false);\r\n    const handleOffline = () => setIsOffline(true);\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const loadData = async () => {\r\n      try {\r\n        // Load wallet data\r\n        let walletData;\r\n        if (navigator.onLine) {\r\n          // Try to get wallet from API\r\n          const walletRes = await axios.get('/api/wallets');\r\n          walletData = walletRes.data;\r\n        } else {\r\n          // Use localStorage in offline mode\r\n          walletData = getStoredWallet();\r\n          if (!walletData) {\r\n            setError('No wallet data available offline');\r\n            setLoading(false);\r\n            return;\r\n          }\r\n        }\r\n        setWallet(walletData);\r\n        \r\n        // Load transaction history\r\n        let transactionData;\r\n        if (navigator.onLine) {\r\n          // Get from API if online\r\n          const transactionsRes = await axios.get('/api/transactions');\r\n          transactionData = transactionsRes.data;\r\n          \r\n          // Sync with local pending transactions\r\n          const storedTransactions = getStoredTransactions();\r\n          const pendingTransactions = storedTransactions.filter(t => t.isPending);\r\n          \r\n          if (pendingTransactions.length > 0) {\r\n            // TODO: In a real app, we would sync these with the server\r\n            // For now, just display them\r\n            transactionData = [...pendingTransactions, ...transactionData];\r\n            \r\n            // Update localStorage to mark these as no longer pending\r\n            storeTransactions(transactionData);\r\n          }\r\n        } else {\r\n          // Use localStorage in offline mode\r\n          transactionData = getStoredTransactions();\r\n        }\r\n        \r\n        setTransactions(transactionData);\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error loading transaction history:', err);\r\n        \r\n        // Fallback to localStorage\r\n        const storedWallet = getStoredWallet();\r\n        const storedTransactions = getStoredTransactions();\r\n        \r\n        if (storedWallet) {\r\n          setWallet(storedWallet);\r\n        }\r\n        \r\n        setTransactions(storedTransactions);\r\n        \r\n        if (!storedWallet && !storedTransactions.length) {\r\n          setError('Failed to load transaction history');\r\n        }\r\n        \r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadData();\r\n  }, []);\r\n\r\n  const formatDate = (date) => {\r\n    return moment(date).format('MMM DD, YYYY [at] h:mm A');\r\n  };\r\n\r\n  if (loading) {\r\n    return <div>Loading transaction history...</div>;\r\n  }\r\n\r\n  if (error) {\r\n    return <div className=\"alert alert-danger\">{error}</div>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"text-center my-4\">Transaction History</h1>\r\n      \r\n      {isOffline && (\r\n        <div className=\"alert alert-warning\">\r\n          <i className=\"fas fa-wifi-slash\"></i> You are currently offline. Displaying locally stored transactions.\r\n        </div>\r\n      )}\r\n      \r\n      {transactions.length === 0 ? (\r\n        <div className=\"alert alert-info\">\r\n          No transactions found. Start sending or receiving coins!\r\n        </div>\r\n      ) : (\r\n        <div className=\"transaction-list\">\r\n          {transactions.map((transaction) => {\r\n            const isSender = wallet && transaction.senderWalletAddress === wallet.walletAddress;\r\n            const otherPartyAddress = isSender\r\n              ? transaction.receiverWalletAddress\r\n              : transaction.senderWalletAddress;\r\n\r\n            return (\r\n              <div\r\n                key={transaction.id || transaction._id}\r\n                className=\"transaction-item\"\r\n              >\r\n                <div className=\"transaction-details\">\r\n                  <span\r\n                    className={`transaction-amount ${\r\n                      isSender ? 'sent' : 'received'\r\n                    }`}\r\n                  >\r\n                    {isSender ? '-' : '+'}{transaction.amount} Coins\r\n                  </span>\r\n                  <span className=\"transaction-date\">\r\n                    {formatDate(transaction.date)}\r\n                  </span>\r\n                  <span className=\"transaction-address\">\r\n                    {isSender ? 'To: ' : 'From: '}{otherPartyAddress}\r\n                  </span>\r\n                </div>\r\n                <div>\r\n                  <span className={`badge ${transaction.isPending ? 'badge-warning' : 'badge-primary'}`}>\r\n                    {transaction.isPending ? 'Pending' : (isSender ? 'Sent' : 'Received')}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionHistory; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}